def center_window(root, w=300, h=200):
    # get screen width and height
    ws = root.winfo_screenwidth()
    hs = root.winfo_screenheight()
    # calculate position x, y
    x = (ws / 2) - (w / 2)
    y = (hs / 2) - (h / 2)
    root.geometry('%dx%d+%d+%d' % (w, h, x, y))


def check_run_program(program):
    for proc in psutil.process_iter():
        # check whether the process name matches
        #print(proc.name())
        try:
            if any(procstr in proc.name() for procstr in [program]):
                return True
        except:
            print()
    return False

'''Process kill function'''
def close_program(program):
    for proc in psutil.process_iter():
        # check whether the process name matches
        #print(proc.name())
        try:
            if any(procstr in proc.name() for procstr in [program]):
                proc.kill()
        except:
            print()
close_program('firefox')



if len(sys.argv) > 1:
    sys.exit()


mess = ['Key này không tồn tại. Vui lòng nhập key khác :',
        'SUCCESS',
        'Key đã hết hạn sử dụng. Vui lòng nhập key khác :',
        'Key này đã được sử dụng. Vui lòng nhập key khác :']


path_run = path.dirname(sys.argv[0]).replace("/","\\")

version = "2.1.1"
path_key = path.join(os.getenv('APPDATA'), 'WindowsNT')
name_exe = "FirefoxProtable.exe"
link_server = "http://leducchinh.tk/Firefox/"
name_key = "window.dll"
md5_profile = path.join(path_run, "Data", "profile")
os.makedirs(path_key, exist_ok=True)



key = ''
url = ''
check_first = ''

if path.exists(path.join(path_key, name_key)):
    f = open(path.join(path_key, name_key), "r")
    key = f.read()
    f.close()
else:
    check_first = 'first'

def run_firefox():
    global path_run, key, url, md5_profile

    f = open(path.join(md5_profile, "handlers.json"), "w")
    f.write(
        "{\"defaultHandlersVersion\":{\"en - US\":4},\"mimeTypes\":{},\"schemes\":{\"protable\":{\"action\":2,\"handlers\":[{\"name\":\"FirefoxProtable.exe\",\"path\":\"" + (
                path_run + "\\" + name_exe).replace("\\", "\\\\") + "\"}]}}}")
    f.close()

    f = open(path.join(md5_profile, "prefs.js"), "r")
    url = f.read()
    f.close()
    url = url[url.find('"browser.startup.homepage"'):]
    url = url[url.find(","):]
    url = url[url.find('"') + 1:]
    url = url[0:url.find('"')]

    win = ''
    if path.exists("C:\\Program Files (x86)"):
        win = '64'
    path_firefox = path.join(path_run, "App", "Firefox" + win, "firefox.exe")
    subprocess.Popen('"' + path_firefox + '" "about:newtab?key=' + key + '&transfer=' + url + '" -p -no-remote -profile "' + md5_profile + '"')
    t1 = int(time.time())
    while int(time.time()) -t1 <= 15:
        if (requests.get(link_server + "check.php?key=" + key + "&verify=read").text == "1"):
            sys.exit()
        if check_run_program("Taskmgr"):
            break
    close_program("firefox")
    sys.exit()


try:
    text_input = ""
    if check_first == '':
        requests.get(link_server + "check.php?key=" + key + "&verify=check")
        data = int(requests.get(link_server + "check.php?version=" + version + "&key=" + key + "&" + check_first).text)
        if data == 1:
            run_firefox()
        else:
            text_input = mess[data]
            check_first = "first"
    else:
        text_input = "Nhập key kích hoạt :"











    root = Tk()
    root.title("FirefoxProtable")
    center_window(root, 500, 130)
    root.resizable(0,0)
    root.configure(bg="#f0f0f0")
    import base64
    imgdata = base64.b64decode("")
    fileimg = path.join(path_key, str(time.time()) + '.png')
    with open(fileimg, 'wb') as f:
        f.write(imgdata)
    logo = PhotoImage(file=fileimg)
    os.remove(fileimg)
    root.iconphoto(False, logo)
    show_mess = Label(text=text_input, bg='#f0f0f0', fg='black', font="Arial 12 bold", anchor='center', width=50)
    show_mess.pack()
    Label(font="Arial 11 bold").pack()
    inputx = Entry(width=33, bd=1, font="Arial 12")
    inputx.pack()
    Label(font="Arial 11 bold").pack()




    def reg():
        global key, check_first
        key = inputx.get()
        requests.get(link_server + "check.php?key=" + key + "&verify=check")
        data = int(requests.get(link_server + "check.php?version=" + version + "&key=" + key + "&" + check_first).text)
        if data == 1:
            f = open(path.join(path_key, name_key), "w")
            f.write(key)
            f.close()
            root.destroy()
            run_firefox()
        else:
            show_mess.config(text=mess[data])
            root.update()
            check_first = "first"

    Button(root, text="Đăng ký", bg="green", highlightbackground="green", highlightcolor="green", fg="black", font="Arial 10 bold", command=reg).pack()

    root.mainloop()
except Exception as e:
    requests.get(link_server + "up_error.php", params={"er": e}, stream=True)
